import os
import asyncio
import tempfile
import sounddevice as sd
import speech_recognition as sr
import edge_tts


def find_device_index_by_name(keyword, kind='input'):
    devices = sd.query_devices()
    for i, dev in enumerate(devices):
        if keyword.lower() in dev['name'].lower():
            if kind == 'input' and dev['max_input_channels'] > 0:
                return i
            elif kind == 'output' and dev['max_output_channels'] > 0:
                return i
    return None


class VoiceService:
    def __init__(self, mic_name="USB Composite", speaker_name="pulse"):
        # Ch·ªçn PulseAudio n·∫øu ƒëang d√πng h·ªá th·ªëng h·ªó tr·ª£ mixing
        self.mic_index = find_device_index_by_name(mic_name, kind='input')
        self.speaker_index = find_device_index_by_name(speaker_name, kind='output')
        self.recognizer = sr.Recognizer()

        if self.mic_index is None:
            raise ValueError(f"Kh√¥ng t√¨m th·∫•y micro n√†o ch·ª©a '{mic_name}'!")
        if self.speaker_index is None:
            raise ValueError(f"Kh√¥ng t√¨m th·∫•y loa n√†o ch·ª©a '{speaker_name}'!")

        print(f"üé§ Mic index: {self.mic_index}")
        print(f"üîä Speaker index (PulseAudio): {self.speaker_index}")

    def speak(self, text):
        if not text:
            print("‚ùå Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ n√≥i.")
            return

        async def run_tts():
            try:
                communicate = edge_tts.Communicate(
                    text=text,
                    voice="vi-VN-HoaiMyNeural",
                    rate="+30%"
                )

                with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as f:
                    await communicate.save(f.name)
                    # D√πng ffplay ƒë·ªÉ ph√°t qua PulseAudio, h·ªó tr·ª£ playback song song
                    os.system(f"ffplay -nodisp -autoexit -loglevel quiet {f.name} &")

            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói TTS ho·∫∑c ph√°t √¢m: {e}")

        asyncio.run(run_tts())

    def recognize_speech(self):
        try:
            with sr.Microphone(device_index=self.mic_index, sample_rate=48000) as source:
                self.recognizer.adjust_for_ambient_noise(source)
                print("üéôÔ∏è ƒêang l·∫Øng nghe ...")
                audio = self.recognizer.listen(source)

            print("üß† ƒêang x·ª≠ l√Ω √¢m thanh ...")
            return self.recognizer.recognize_google(audio, language="vi-VN")

        except sr.UnknownValueError:
            print("‚ùå Kh√¥ng th·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i!")
        except sr.RequestError:
            print("‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• nh·∫≠n di·ªán!")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi thu √¢m: {e}")

        return None


# D√πng 1 ph·∫ßn t√™n thi·∫øt b·ªã l√† ƒë∆∞·ª£c
voice_service = VoiceService(mic_name="USB Composite Device", speaker_name="pulse")
